#!/usr/bin/env jit cc -g -Werror -Wall -lnatpmp --

/* $Id: natpmpc.c,v 1.13 2012/08/21 17:23:38 nanard Exp $ */
/* libnatpmp
Copyright (c) 2007-2011, Thomas BERNARD
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.
    * The name of the author may not be used to endorse or promote products
	  derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*/
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#if defined(_MSC_VER)
#if _MSC_VER >= 1400
#define strcasecmp _stricmp
#else
#define strcasecmp stricmp
#endif
#else
#include <unistd.h>
#endif
#ifdef WIN32
#include <winsock2.h>
#else
#include <netinet/in.h>
#include <arpa/inet.h>
#endif

// #define ENABLE_STRNATPMPERR

#include "natpmp.h"

static const char * argv0;
static FILE* debug;

static void usage()
{
	fprintf(stderr, "Usage :\n");
	fprintf(stderr, "  %s [options]\n", argv0);
	fprintf(stderr, "\tdisplay the public IP address.\n");
	fprintf(stderr, "  %s [options] [protcol:]<public port>[:<private port>] <public port>[:<private port>] ... \n", argv0);
	fprintf(stderr, "\tadd map one or more ports. protocol is 'tcp' or 'udp'.\n");
	fprintf(stderr, "\nOption available :\n");
	fprintf(stderr, "  -g ipv4address\n\tforce the gateway to be used as destination for NAT-PMP commands.\n");
	fprintf(stderr, "  -l lifetime\n\tset lifetime for port mapping.\n");
	fprintf(stderr, "  -v\n\tbe verbose.\n");
	fprintf(stderr, "\n  In order to remove a mapping, set it with a lifetime of 0 seconds.\n");
	fprintf(stderr, "  To remove all mappings for your machine, use 0 as private port and lifetime.\n");

	exit(1);
}

#define NO		0
#define YES		1

typedef struct {
	int protocol;
	uint16_t privateport;
	uint16_t publicport;
	uint32_t lifetime;
} port_mapping_t;

#define MAX_PORT_MAPPINGS 32

typedef struct {
	int verbose;
	int gateway;
	port_mapping_t port_mappings[MAX_PORT_MAPPINGS];
	unsigned port_mappings_count;
} arguments_t;

/*
 * == Argument parsing ========================================================
 */

static void parse_port_mapping(const char* s, port_mapping_t* p_port_mapping) {
	p_port_mapping->publicport = 0;
	p_port_mapping->privateport = 0;
	p_port_mapping->protocol = NATPMP_PROTOCOL_TCP;

	if(0 == strncasecmp(s, "tcp:", 4)) {
		s += 4;
	}
	else if(0 == strncasecmp(s, "udp:", 4)) {
		p_port_mapping->protocol = NATPMP_PROTOCOL_UDP;
		s += 4;
	}

	if(2 == sscanf(s, "%hu:%hu", &p_port_mapping->publicport, &p_port_mapping->privateport)) {
		return;
	}

	if(1 == sscanf(s, "%hu", &p_port_mapping->publicport)) {
		p_port_mapping->privateport = p_port_mapping->publicport;
		return;
	}

	fprintf(stderr, "Cannot parse port mapping '%s'\n", s);
	exit(1);
}

static void parse_args(const char** argv, arguments_t* args) {
	in_addr_t lifetime = 3600;

	args->verbose = NO;
	args->gateway = 0;
	args->port_mappings_count = 0;

	/* argument parsing */
	while(*++argv) {
		if(*argv[0] == '-') {
			switch((*argv)[1]) {
			case 'g':
				if(!*++argv) usage();
				args->gateway = inet_addr(*argv);
				break;
			case 'l':
				if(!*++argv) usage();
				lifetime = (unsigned)strtoul(*argv, (char **)NULL, 10);
				break;
			case 'v':
				args->verbose = YES;
				break;
			default:
				usage();
			};
			continue;
		}

		if(args->port_mappings_count == MAX_PORT_MAPPINGS) {
			fprintf(stderr, "Cannot map more than %d ports at once.\n", MAX_PORT_MAPPINGS);
			exit(1);
		}

		port_mapping_t* port_mapping = args->port_mappings + args->port_mappings_count;
		parse_port_mapping(*argv, port_mapping);
		port_mapping->lifetime = lifetime;
		args->port_mappings_count++;
	}
}

#define MAX_TRIES 6

/*
 * == NAT-PMP high level interface ============================================
 */

static int natpmp_init(natpmp_t* natpmp, arguments_t* args)
{
	int r = initnatpmp(natpmp, args->gateway != 0, args->gateway);
	fprintf(debug, "initnatpmp() returned %d (%s)\n", r, r?"FAILED":"SUCCESS");
	if(r < 0) return NO;

	/* log gateway */
	struct in_addr gateway_in_use;
	gateway_in_use.s_addr = natpmp->gateway;
	fprintf(debug, "using NAT-PMP gateway : %s\n", inet_ntoa(gateway_in_use));

	return YES;
}

static void natpmp_close(natpmp_t* natpmp)
{
	int r = closenatpmp(natpmp);
	fprintf(debug, "closenatpmp() returned %d (%s)\n", r, r==0?"SUCCESS":"FAILED");
}

static natpmpresp_t* natpmp_wait_for_success_response(natpmp_t* natpmp, natpmpresp_t* response) {
	int remaining_tries = MAX_TRIES;

	while(remaining_tries > 0) {
		fd_set fds;
		struct timeval timeout;

		FD_ZERO(&fds);
		FD_SET(natpmp->s, &fds);
		getnatpmprequesttimeout(natpmp, &timeout);

		if(0 > select(FD_SETSIZE, &fds, NULL, NULL, &timeout)) {
			perror("select()");
			return 0;
		}

		int r = readnatpmpresponseorretry(natpmp, response);
		int sav_errno = errno;
		fprintf(debug, "readnatpmpresponseorretry returned %d (%s)\n", r, r==0?"OK":(r==NATPMP_TRYAGAIN?"TRY AGAIN":"FAILED"));
		if(r == 0) {
			fprintf(debug, "epoch = %u\n", response->epoch);
			return response;
		}

		if(r != NATPMP_TRYAGAIN) {
#ifdef ENABLE_STRNATPMPERR
			fprintf(debug, "readnatpmpresponseorretry() failed : %s\n", strnatpmperr(r));
#endif
			fprintf(debug, "  errno=%d '%s'\n", sav_errno, strerror(sav_errno));
			return 0;
		}
	}

	fprintf(stderr, "Giving up after %d tries.\n", MAX_TRIES);
	return 0;
}

static const char* natpmp_public_address(natpmp_t* natpmp, char* publicaddress)
{
	int r = sendpublicaddressrequest(natpmp);
	fprintf(debug, "sendpublicaddressrequest returned %d (%s)\n", r, r==2?"SUCCESS":"FAILED");
	if(r<0) return 0;

	natpmpresp_t response_buf;
	natpmpresp_t *response = natpmp_wait_for_success_response(natpmp, &response_buf);
	if(!response)
		return 0;

	/* TODO : check that response.type == 0 */
	fprintf(debug, "Public IP address : %s\n", inet_ntoa(response->pnu.publicaddress.addr));
	sprintf(publicaddress, "%s", inet_ntoa(response->pnu.publicaddress.addr));

	return publicaddress;
}

static int natpmp_map_port(natpmp_t* natpmp, port_mapping_t* port_mapping, unsigned* lifetime) {
	int r = sendnewportmappingrequest(natpmp, port_mapping->protocol,
				port_mapping->privateport, port_mapping->publicport,
				port_mapping->lifetime);
	fprintf(debug, "sendnewportmappingrequest returned %d (%s)\n",
	       r, r==12?"SUCCESS":"FAILED");
	if(r < 0)
		return NO;

	natpmpresp_t response_buf;
	natpmpresp_t *response = natpmp_wait_for_success_response(natpmp, &response_buf);
	if(!response) return NO;

	*lifetime = response->pnu.newportmapping.lifetime;
	return YES;
}

/*
 * == main ====================================================================
 */

int main(int argc, const char ** argv)
{

#ifdef WIN32
	WSADATA wsaData;
	int nResult = WSAStartup(MAKEWORD(2,2), &wsaData);
	if(nResult != NO_ERROR)
	{
		fprintf(stderr, "WSAStartup() failed.\n");
		return -1;
	}
#endif

	argv0 = argv[0];
	arguments_t args;

	parse_args(argv, &args);

	debug = args.verbose ? stderr : fopen("/dev/null", "w");

	// if(args.verbose) {
	// 	unsigned i = 0;
	// 	for(i = 0; i<args.port_mappings_count; ++i) {
	// 		port_mapping_t* mapping = args.port_mappings + i;
	//
	// 		const char* protocol = mapping->protocol == NATPMP_PROTOCOL_UDP ? "udp" : "tcp";
	// 		fprintf(stderr, "%s: public:%hu -> localhost:%hu: pending (lifetime %u)\n", 
	// 			protocol, mapping->publicport, mapping->privateport, mapping->lifetime);
	// 	}
	// }

	/*
	 * Try to get NAT-PMP public IP. We use that to decide whether we are
	 * going NAT-PMP or UPnP.
	 */

	natpmp_t natpmp;

	if(!natpmp_init(&natpmp, &args)) {
		fprintf(stderr, "Cannot initialize NAT-PMP.\n");
		return 1;
	}

	char publicaddress_buf[32];
	const char* publicaddress = natpmp_public_address(&natpmp, publicaddress_buf);
	if(!publicaddress) {
		fprintf(stderr, "NAT-PMP: Cannot find public IP address. NAT-PMP is not available.\n");
	}

	if(publicaddress) {
		if(args.port_mappings_count == 0)
			printf("%s\n", publicaddress);

		unsigned i = 0;
		for(i = 0; i<args.port_mappings_count; ++i) {
			port_mapping_t* mapping = args.port_mappings + i;

			unsigned lifetime = 0;
			int r = natpmp_map_port(&natpmp, mapping, &lifetime);

			const char* protocol = mapping->protocol == NATPMP_PROTOCOL_UDP ? "udp" : "tcp";
			fprintf(stderr, "NAT-PMP: %s: %s:%hu -> localhost:%hu: %s (lifetime %u)\n", 
				protocol, publicaddress, mapping->publicport, mapping->privateport, (r ? "OK" : "FAIL"), lifetime);

			if(!r) break;
		}
	}

	natpmp_close(&natpmp);
	return 0;
}

