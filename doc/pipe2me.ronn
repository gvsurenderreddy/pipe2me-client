pipe2me(1) -- manage tunnels to a pipe2me server
================================================

## SYNOPSIS

`pipe2me` [ options ] setup ...<br>
`pipe2me` [ options ] env<br>
`pipe2me` [ options ] start<br>
`pipe2me` [ options ] monit ...<br>
`pipe2me` [ options ] verify ...<br>

## DESCRIPTION

**pipe2me** is a client for the pipe2me server package, which helps tunnel
TCP connections through routers.

## FILES

**pipe2me** manages a set of tunnels, with a common FQDN (fully qualified
domain name) in a single directory. This directory contains these files:

  * *pipe2me.id_rsa*: the SSH public key
  * *pipe2me.id_rsa.pub*: the SSH private key
  * *pipe2me.info.inc*: settings managed by the pipe2me server
  * *pipe2me.local.inc*: settings managed by the client
  * *pipe2me.openssl.cert*: openssl certificate
  * *pipe2me.openssl.priv*: openssl private key
  * *pipe2me.procfile*: procfile to run tunnels
  * *pipe2me.monitrc*: monit(1) file to run tunnels

## OPTIONS

These options control the pipe2me operations.

  * `--dir DIR`:
    Change into DIR before operations
  * `-h`, `--help`:
    Show pipe2me help information and exit.
  * `-v`, `--verbose`:
    Be more verbose.
  * `-q`, `--quiet`:
    Be more quiet.
  * `--silent`:
    Be absolutely silent.

## TUNNEL SETUP

`pipe2me` [ options ] setup ...<br>

These options control the tunnel setup:

Options include:

  * `--server`, `-s` servername:
    Use pipe2.me server on that host (default: http://pipe2.dev)
  * `--auth`, `-a` authtoken:
    pipe2.me auth token (default: pipe2-dev-token)
  * `--protocols`, `-p` protocols:
    protocol names, e.g. 'http,https,imap' (default: https)
  * `--local-ports`, `-l` ports:
    local ports, one per protocol

### EXAMPLES

Setup 3 tunnels under a specific FQDN:

    $ pipe2me setup --protocols=https,http,imap

## SHOW TUNNEL SETTINGS

`pipe2me` env<br>

shows the tunnel configuration in the current directory. Example:

    $ ./bin/pipe2me env
    PIPE2ME_SERVER=http://pipe2.dev
    PIPE2ME_TOKEN=69o1ykbfzggz9lcd6qjzkggq7
    PIPE2ME_FQDN=handsome-snowwhite-hamster.pipe2.dev
    PIPE2ME_URLS_0=https://handsome-snowwhite-hamster.pipe2.dev:10049
    PIPE2ME_TUNNEL=ssh://eno@pipe2.dev:4444

`pipe2me` verify<br>

verify that a tunnel exists and is online. The return value is != 0 if the tunnel
does not exist. Example:

    $ ./bin/pipe2me verify
    handsome-snowwhite-hamster.pipe2.dev

or

    $ ./bin/pipe2me verify
    http://pipe2.dev:8080/tunnels/7171496237390591457/verify: 404 tunnel expired (Net::HTTPNotFound)

## MANAGE TUNNELS with monit

The pipe2me client package comes with support for the monit(1) process manager
and the daemon(1) daemon package. These must be installed on the local machine
in order to use the following commands.

`pipe2me` monitrc [ --port &lt;control-port&gt; ]<br>

creates a configuration file *pipe2me.monitrc* which controls all tunnels. This
command also supports the `--echo` option which includes echo servers in the
monitrc file.

`pipe2me` monit [ --port &lt;control-port&gt; ] [ arguments ]<br>

recreates the monit configuration file and run monit against that. Note that this
command is identical to `pipe2me monitrc && monit -c pipe2me.monitrc ... ` - once
you created the monitrc control file you could use the latter for faster startup
times.

## START TUNNELS (via foreman)

The pipe2me-client comes with support for the foreman process manager. This allows
you to run tunnels without any non-ruby software. Due to some limitations with the
foreman software this mode should only be used during development and test - for
deployment purposes you should use the monit(1) process manager (see above).

To start all configured tunnels run

`pipe2me` start<br>

## TEST TUNNELS (via foreman)

To help you debug tunnel configurations the pipe2me client comes with a number
of echo servers. (An echo server is a server which responds with a simple
string based on the request.) The current version comes with echo support for
the _http_ and _https_ protocols.

To start all configured tunnels and echo servers run

`pipe2me` start --echo<br>

## BUGS

The installed version of **pipe2me** is written in Ruby. A more portable
and version of this program - e.g. in bash - would be welcome.

## LIMITATIONS

### monitrc modus

- monit(1) is configured to use a **control port**, which must be unique on the
local machine. I would prefer to use a local socket, but AFAIK monit does not
support that (yet?). In the meantime you must make sure that the control port
(set via the *--port* option) is not in use by another process on this machine.
The default value for the control port is 5555.

- monit(1) is configured to log into pipe2me.monit.log. You must make sure that
this file is rotated on a regular base. See monit(1) for details.

**It is strongly recommended to use the created monitrc file as a suggestion and
to adjust that configuration according to the needs on the local environment.**

### Automatic HTTPS redirections

When you create a HTTPS tunnel on a server with a name pinkbunny.pipe2.server, which
ends up at port 1337, the server redirects all connections that arrive at the HTTPS
default port (443) to pinkbunny.pipe2.server:1337. This is a convinience feature, but
it encrypts this connection step using a wildcard certificate for `*.pipe2.server`.
This means that the initial request - including and other potentially relevant information -
could be read by the pipe2me server, and is a limitation of the involved protocols.

If you are concerned don't use this feature, but use the correct domain name **and port**
from the go. If you rely on this feature we recommend at least to transfer cookies only on
subdirectories.

## COPYRIGHT

**pipe2me** is Copyright (C) 2013,1024 The kinko team <https://kinko.me>

The software contains third party code under their respective copyrights.
Please see the README.md file for more information.

## SEE ALSO

ssh(1), sshd(8), autossh(1), monit(1), foreman(1).
